#!/usr/bin/python
#
#
#   'UPDATE_MSG': {' 3.65.6.20220723': [' 3.65.11.20221005']},


#def parse_homematic(info):
#  result = { }
#  for line in info:
#    key = line[0]
#    device = result.get(key)
#    if key == 'SVC_MSG':
#      if device is None:
#        device = []
#        result[key] = device
#      device.append(line[1:])
#    else:
#      if device is None:
#        device = { }
#        result[key] = device
#      device[line[1]] = line[2:]
#  return result


import json
import pprint

def parse_homematic_addons(info):

  parsed = {}
  
  for line in info: 
    # pprint.pprint(line)
    t,d = line
    
    k = "remote" if t == "remote_addon" else "local"
    v = json.loads(d)
    # pprint.pprint(v)
    if not v['name'] in parsed:
      parsed[v['name']] = {}
    parsed[v['name']][k] = v["webversion"]

  # pprint.pprint(parsed)
  return parsed


def inventory_homematic_addons(parsed):
  #pprint.pprint(parsed)
  for key, value in parsed.items():
    yield key, None


def check_homematic_addons(item, params, parsed):
  #pprint.pprint(item)
  #pprint.pprint(params)
  #pprint.pprint(parsed)

  item = parsed.get(item, None)
  # pprint.pprint(item)
  
  if item:
    local = item.get("local",  None)
    remote = item.get("remote", None)
  
    rc = 0
    msg = "Version: %s" % local
    if remote:
      if remote != local:
        msg = msg + " (Update available: %s (!))" % remote
        rc = 1
    
    return rc, msg


check_info['homematic_addons'] = {
  'check_function':      check_homematic_addons,
  'inventory_function':  inventory_homematic_addons,
  'parse_function':      parse_homematic_addons,
  'service_description': "HomeMatic Addon %s",
}

